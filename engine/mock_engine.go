// Code generated by mockery v2.40.1. DO NOT EDIT.

package engine

import (
	model "github.com/pronovic/go-apologies/model"
	mock "github.com/stretchr/testify/mock"
)

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

// Characters provides a mock function with given fields:
func (_m *MockEngine) Characters() []Character {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Characters")
	}

	var r0 []Character
	if rf, ok := ret.Get(0).(func() []Character); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Character)
		}
	}

	return r0
}

// ChooseNextMove provides a mock function with given fields: character, view
func (_m *MockEngine) ChooseNextMove(character Character, view model.PlayerView) (model.Move, error) {
	ret := _m.Called(character, view)

	if len(ret) == 0 {
		panic("no return value specified for ChooseNextMove")
	}

	var r0 model.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(Character, model.PlayerView) (model.Move, error)); ok {
		return rf(character, view)
	}
	if rf, ok := ret.Get(0).(func(Character, model.PlayerView) model.Move); ok {
		r0 = rf(character, view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(Character, model.PlayerView) error); ok {
		r1 = rf(character, view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ColorMap provides a mock function with given fields:
func (_m *MockEngine) ColorMap() map[model.PlayerColor]Character {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ColorMap")
	}

	var r0 map[model.PlayerColor]Character
	if rf, ok := ret.Get(0).(func() map[model.PlayerColor]Character); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.PlayerColor]Character)
		}
	}

	return r0
}

// Completed provides a mock function with given fields:
func (_m *MockEngine) Completed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Completed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConstructLegalMoves provides a mock function with given fields: view, card
func (_m *MockEngine) ConstructLegalMoves(view model.PlayerView, card model.Card) (model.Card, []model.Move, error) {
	ret := _m.Called(view, card)

	if len(ret) == 0 {
		panic("no return value specified for ConstructLegalMoves")
	}

	var r0 model.Card
	var r1 []model.Move
	var r2 error
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Card) (model.Card, []model.Move, error)); ok {
		return rf(view, card)
	}
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Card) model.Card); ok {
		r0 = rf(view, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(model.PlayerView, model.Card) []model.Move); ok {
		r1 = rf(view, card)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Move)
		}
	}

	if rf, ok := ret.Get(2).(func(model.PlayerView, model.Card) error); ok {
		r2 = rf(view, card)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Discard provides a mock function with given fields: card
func (_m *MockEngine) Discard(card model.Card) error {
	ret := _m.Called(card)

	if len(ret) == 0 {
		panic("no return value specified for Discard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Card) error); ok {
		r0 = rf(card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Draw provides a mock function with given fields:
func (_m *MockEngine) Draw() (model.Card, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Draw")
	}

	var r0 model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.Card, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteMove provides a mock function with given fields: color, move
func (_m *MockEngine) ExecuteMove(color model.PlayerColor, move model.Move) (bool, error) {
	ret := _m.Called(color, move)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteMove")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PlayerColor, model.Move) (bool, error)); ok {
		return rf(color, move)
	}
	if rf, ok := ret.Get(0).(func(model.PlayerColor, model.Move) bool); ok {
		r0 = rf(color, move)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.PlayerColor, model.Move) error); ok {
		r1 = rf(color, move)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields:
func (_m *MockEngine) First() model.PlayerColor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 model.PlayerColor
	if rf, ok := ret.Get(0).(func() model.PlayerColor); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.PlayerColor)
	}

	return r0
}

// Game provides a mock function with given fields:
func (_m *MockEngine) Game() model.Game {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Game")
	}

	var r0 model.Game
	if rf, ok := ret.Get(0).(func() model.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Game)
		}
	}

	return r0
}

// Mode provides a mock function with given fields:
func (_m *MockEngine) Mode() model.GameMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mode")
	}

	var r0 model.GameMode
	if rf, ok := ret.Get(0).(func() model.GameMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.GameMode)
	}

	return r0
}

// NextTurn provides a mock function with given fields:
func (_m *MockEngine) NextTurn() (Character, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextTurn")
	}

	var r0 Character
	var r1 error
	if rf, ok := ret.Get(0).(func() (Character, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Character); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Character)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlayNext provides a mock function with given fields:
func (_m *MockEngine) PlayNext() (model.Game, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PlayNext")
	}

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.Game, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Players provides a mock function with given fields:
func (_m *MockEngine) Players() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Players")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *MockEngine) Reset() (model.Game, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.Game, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFirst provides a mock function with given fields: first
func (_m *MockEngine) SetFirst(first model.PlayerColor) error {
	ret := _m.Called(first)

	if len(ret) == 0 {
		panic("no return value specified for SetFirst")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.PlayerColor) error); ok {
		r0 = rf(first)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartGame provides a mock function with given fields:
func (_m *MockEngine) StartGame() (model.Game, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.Game, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Started provides a mock function with given fields:
func (_m *MockEngine) Started() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Started")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *MockEngine) State() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Winner provides a mock function with given fields:
func (_m *MockEngine) Winner() Character {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Winner")
	}

	var r0 Character
	if rf, ok := ret.Get(0).(func() Character); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Character)
		}
	}

	return r0
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
