// Code generated by mockery v2.40.1. DO NOT EDIT.

package model

import mock "github.com/stretchr/testify/mock"

// MockPlayer is an autogenerated mock type for the Player type
type MockPlayer struct {
	mock.Mock
}

// AllPawnsInHome provides a mock function with given fields:
func (_m *MockPlayer) AllPawnsInHome() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllPawnsInHome")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AppendToHand provides a mock function with given fields: card
func (_m *MockPlayer) AppendToHand(card Card) {
	_m.Called(card)
}

// Color provides a mock function with given fields:
func (_m *MockPlayer) Color() PlayerColor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Color")
	}

	var r0 PlayerColor
	if rf, ok := ret.Get(0).(func() PlayerColor); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PlayerColor)
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *MockPlayer) Copy() Player {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 Player
	if rf, ok := ret.Get(0).(func() Player); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Player)
		}
	}

	return r0
}

// FindFirstPawnInStart provides a mock function with given fields:
func (_m *MockPlayer) FindFirstPawnInStart() *Pawn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindFirstPawnInStart")
	}

	var r0 *Pawn
	if rf, ok := ret.Get(0).(func() *Pawn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pawn)
		}
	}

	return r0
}

// Hand provides a mock function with given fields:
func (_m *MockPlayer) Hand() []Card {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hand")
	}

	var r0 []Card
	if rf, ok := ret.Get(0).(func() []Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Card)
		}
	}

	return r0
}

// IncrementTurns provides a mock function with given fields:
func (_m *MockPlayer) IncrementTurns() {
	_m.Called()
}

// Pawns provides a mock function with given fields:
func (_m *MockPlayer) Pawns() []Pawn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pawns")
	}

	var r0 []Pawn
	if rf, ok := ret.Get(0).(func() []Pawn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Pawn)
		}
	}

	return r0
}

// PublicData provides a mock function with given fields:
func (_m *MockPlayer) PublicData() Player {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicData")
	}

	var r0 Player
	if rf, ok := ret.Get(0).(func() Player); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Player)
		}
	}

	return r0
}

// RemoveFromHand provides a mock function with given fields: card
func (_m *MockPlayer) RemoveFromHand(card Card) {
	_m.Called(card)
}

// Turns provides a mock function with given fields:
func (_m *MockPlayer) Turns() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Turns")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewMockPlayer creates a new instance of MockPlayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayer {
	mock := &MockPlayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
