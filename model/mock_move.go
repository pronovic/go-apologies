// Code generated by mockery v2.40.1. DO NOT EDIT.

package model

import mock "github.com/stretchr/testify/mock"

// MockMove is an autogenerated mock type for the Move type
type MockMove struct {
	mock.Mock
}

// Actions provides a mock function with given fields:
func (_m *MockMove) Actions() []Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Actions")
	}

	var r0 []Action
	if rf, ok := ret.Get(0).(func() []Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Action)
		}
	}

	return r0
}

// AddSideEffect provides a mock function with given fields: action
func (_m *MockMove) AddSideEffect(action Action) {
	_m.Called(action)
}

// Card provides a mock function with given fields:
func (_m *MockMove) Card() Card {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Card")
	}

	var r0 Card
	if rf, ok := ret.Get(0).(func() Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Card)
		}
	}

	return r0
}

// MergedActions provides a mock function with given fields:
func (_m *MockMove) MergedActions() []Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MergedActions")
	}

	var r0 []Action
	if rf, ok := ret.Get(0).(func() []Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Action)
		}
	}

	return r0
}

// SideEffects provides a mock function with given fields:
func (_m *MockMove) SideEffects() []Action {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SideEffects")
	}

	var r0 []Action
	if rf, ok := ret.Get(0).(func() []Action); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Action)
		}
	}

	return r0
}

// NewMockMove creates a new instance of MockMove. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMove(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMove {
	mock := &MockMove{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
