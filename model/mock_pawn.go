// Code generated by mockery v2.40.1. DO NOT EDIT.

package model

import mock "github.com/stretchr/testify/mock"

// MockPawn is an autogenerated mock type for the Pawn type
type MockPawn struct {
	mock.Mock
}

// Color provides a mock function with given fields:
func (_m *MockPawn) Color() PlayerColor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Color")
	}

	var r0 PlayerColor
	if rf, ok := ret.Get(0).(func() PlayerColor); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PlayerColor)
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *MockPawn) Copy() Pawn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 Pawn
	if rf, ok := ret.Get(0).(func() Pawn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pawn)
		}
	}

	return r0
}

// Equals provides a mock function with given fields: other
func (_m *MockPawn) Equals(other Pawn) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Equals")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(Pawn) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Index provides a mock function with given fields:
func (_m *MockPawn) Index() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockPawn) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Position provides a mock function with given fields:
func (_m *MockPawn) Position() Position {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Position")
	}

	var r0 Position
	if rf, ok := ret.Get(0).(func() Position); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Position)
		}
	}

	return r0
}

// SetPosition provides a mock function with given fields: position
func (_m *MockPawn) SetPosition(position Position) {
	_m.Called(position)
}

// NewMockPawn creates a new instance of MockPawn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPawn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPawn {
	mock := &MockPawn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
