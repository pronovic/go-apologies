// Code generated by mockery v2.40.1. DO NOT EDIT.

package model

import mock "github.com/stretchr/testify/mock"

// MockPosition is an autogenerated mock type for the Position type
type MockPosition struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *MockPosition) Copy() Position {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 Position
	if rf, ok := ret.Get(0).(func() Position); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Position)
		}
	}

	return r0
}

// Home provides a mock function with given fields:
func (_m *MockPosition) Home() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Home")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MoveToHome provides a mock function with given fields:
func (_m *MockPosition) MoveToHome() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MoveToHome")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveToPosition provides a mock function with given fields: position
func (_m *MockPosition) MoveToPosition(position Position) error {
	ret := _m.Called(position)

	if len(ret) == 0 {
		panic("no return value specified for MoveToPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Position) error); ok {
		r0 = rf(position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveToSafe provides a mock function with given fields: safe
func (_m *MockPosition) MoveToSafe(safe int) error {
	ret := _m.Called(safe)

	if len(ret) == 0 {
		panic("no return value specified for MoveToSafe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(safe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveToSquare provides a mock function with given fields: square
func (_m *MockPosition) MoveToSquare(square int) error {
	ret := _m.Called(square)

	if len(ret) == 0 {
		panic("no return value specified for MoveToSquare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(square)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveToStart provides a mock function with given fields:
func (_m *MockPosition) MoveToStart() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MoveToStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Safe provides a mock function with given fields:
func (_m *MockPosition) Safe() *int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Safe")
	}

	var r0 *int
	if rf, ok := ret.Get(0).(func() *int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// Square provides a mock function with given fields:
func (_m *MockPosition) Square() *int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Square")
	}

	var r0 *int
	if rf, ok := ret.Get(0).(func() *int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockPosition) Start() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockPosition creates a new instance of MockPosition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPosition(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPosition {
	mock := &MockPosition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
