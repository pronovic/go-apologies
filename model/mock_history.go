// Code generated by mockery v2.40.1. DO NOT EDIT.

package model

import (
	timestamp "github.com/pronovic/go-apologies/internal/timestamp"
	mock "github.com/stretchr/testify/mock"
)

// MockHistory is an autogenerated mock type for the History type
type MockHistory struct {
	mock.Mock
}

// Action provides a mock function with given fields:
func (_m *MockHistory) Action() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Action")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Card provides a mock function with given fields:
func (_m *MockHistory) Card() *CardType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Card")
	}

	var r0 *CardType
	if rf, ok := ret.Get(0).(func() *CardType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CardType)
		}
	}

	return r0
}

// Color provides a mock function with given fields:
func (_m *MockHistory) Color() *PlayerColor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Color")
	}

	var r0 *PlayerColor
	if rf, ok := ret.Get(0).(func() *PlayerColor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PlayerColor)
		}
	}

	return r0
}

// Copy provides a mock function with given fields:
func (_m *MockHistory) Copy() History {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 History
	if rf, ok := ret.Get(0).(func() History); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(History)
		}
	}

	return r0
}

// Timestamp provides a mock function with given fields:
func (_m *MockHistory) Timestamp() timestamp.Timestamp {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Timestamp")
	}

	var r0 timestamp.Timestamp
	if rf, ok := ret.Get(0).(func() timestamp.Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(timestamp.Timestamp)
	}

	return r0
}

// NewMockHistory creates a new instance of MockHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistory {
	mock := &MockHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
