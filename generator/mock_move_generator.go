// Code generated by mockery v2.40.1. DO NOT EDIT.

package generator

import (
	model "github.com/pronovic/go-apologies/model"
	mock "github.com/stretchr/testify/mock"
)

// MockMoveGenerator is an autogenerated mock type for the MoveGenerator type
type MockMoveGenerator struct {
	mock.Mock
}

// CalculatePosition provides a mock function with given fields: color, position, squares
func (_m *MockMoveGenerator) CalculatePosition(color model.PlayerColor, position model.Position, squares int) (model.Position, error) {
	ret := _m.Called(color, position, squares)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePosition")
	}

	var r0 model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PlayerColor, model.Position, int) (model.Position, error)); ok {
		return rf(color, position, squares)
	}
	if rf, ok := ret.Get(0).(func(model.PlayerColor, model.Position, int) model.Position); ok {
		r0 = rf(color, position, squares)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(model.PlayerColor, model.Position, int) error); ok {
		r1 = rf(color, position, squares)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LegalMoves provides a mock function with given fields: color, card, pawn, allPawns
func (_m *MockMoveGenerator) LegalMoves(color model.PlayerColor, card model.Card, pawn model.Pawn, allPawns []model.Pawn) []model.Move {
	ret := _m.Called(color, card, pawn, allPawns)

	if len(ret) == 0 {
		panic("no return value specified for LegalMoves")
	}

	var r0 []model.Move
	if rf, ok := ret.Get(0).(func(model.PlayerColor, model.Card, model.Pawn, []model.Pawn) []model.Move); ok {
		r0 = rf(color, card, pawn, allPawns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Move)
		}
	}

	return r0
}

// NewMockMoveGenerator creates a new instance of MockMoveGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMoveGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMoveGenerator {
	mock := &MockMoveGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
