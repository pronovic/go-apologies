// Code generated by mockery v2.40.1. DO NOT EDIT.

package rules

import (
	model "github.com/pronovic/go-apologies/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRules is an autogenerated mock type for the Rules type
type MockRules struct {
	mock.Mock
}

// ConstructLegalMoves provides a mock function with given fields: view, card
func (_m *MockRules) ConstructLegalMoves(view model.PlayerView, card model.Card) ([]model.Move, error) {
	ret := _m.Called(view, card)

	if len(ret) == 0 {
		panic("no return value specified for ConstructLegalMoves")
	}

	var r0 []model.Move
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Card) ([]model.Move, error)); ok {
		return rf(view, card)
	}
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Card) []model.Move); ok {
		r0 = rf(view, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Move)
		}
	}

	if rf, ok := ret.Get(1).(func(model.PlayerView, model.Card) error); ok {
		r1 = rf(view, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateMove provides a mock function with given fields: view, move
func (_m *MockRules) EvaluateMove(view model.PlayerView, move model.Move) (model.PlayerView, error) {
	ret := _m.Called(view, move)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateMove")
	}

	var r0 model.PlayerView
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Move) (model.PlayerView, error)); ok {
		return rf(view, move)
	}
	if rf, ok := ret.Get(0).(func(model.PlayerView, model.Move) model.PlayerView); ok {
		r0 = rf(view, move)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PlayerView)
		}
	}

	if rf, ok := ret.Get(1).(func(model.PlayerView, model.Move) error); ok {
		r1 = rf(view, move)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteMove provides a mock function with given fields: game, player, move
func (_m *MockRules) ExecuteMove(game model.Game, player model.Player, move model.Move) error {
	ret := _m.Called(game, player, move)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteMove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Game, model.Player, model.Move) error); ok {
		r0 = rf(game, player, move)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartGame provides a mock function with given fields: game, mode
func (_m *MockRules) StartGame(game model.Game, mode model.GameMode) error {
	ret := _m.Called(game, mode)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Game, model.GameMode) error); ok {
		r0 = rf(game, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRules creates a new instance of MockRules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRules(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRules {
	mock := &MockRules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
