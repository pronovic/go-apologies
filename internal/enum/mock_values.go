// Code generated by mockery v2.40.1. DO NOT EDIT.

package enum

import mock "github.com/stretchr/testify/mock"

// MockValues is an autogenerated mock type for the Values type
type MockValues[T Enum] struct {
	mock.Mock
}

// GetMember provides a mock function with given fields: value
func (_m *MockValues[T]) GetMember(value string) (T, error) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for GetMember")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (T, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) T); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemberOf provides a mock function with given fields: value
func (_m *MockValues[T]) MemberOf(value string) bool {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for MemberOf")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MemberValues provides a mock function with given fields:
func (_m *MockValues[T]) MemberValues() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemberValues")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Members provides a mock function with given fields:
func (_m *MockValues[T]) Members() []T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 []T
	if rf, ok := ret.Get(0).(func() []T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// NewMockValues creates a new instance of MockValues. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValues[T Enum](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValues[T] {
	mock := &MockValues[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
