// Code generated by mockery v2.40.1. DO NOT EDIT.

package reward

import (
	model "github.com/pronovic/go-apologies/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCalculator is an autogenerated mock type for the Calculator type
type MockCalculator struct {
	mock.Mock
}

// Calculate provides a mock function with given fields: view
func (_m *MockCalculator) Calculate(view model.PlayerView) float32 {
	ret := _m.Called(view)

	if len(ret) == 0 {
		panic("no return value specified for Calculate")
	}

	var r0 float32
	if rf, ok := ret.Get(0).(func(model.PlayerView) float32); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// Range provides a mock function with given fields: players
func (_m *MockCalculator) Range(players int) (float32, float32) {
	ret := _m.Called(players)

	if len(ret) == 0 {
		panic("no return value specified for Range")
	}

	var r0 float32
	var r1 float32
	if rf, ok := ret.Get(0).(func(int) (float32, float32)); ok {
		return rf(players)
	}
	if rf, ok := ret.Get(0).(func(int) float32); ok {
		r0 = rf(players)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(int) float32); ok {
		r1 = rf(players)
	} else {
		r1 = ret.Get(1).(float32)
	}

	return r0, r1
}

// NewMockCalculator creates a new instance of MockCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalculator {
	mock := &MockCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
